let string = '1.5..2.84..63.12.7.2..5.....9..1....8.2.3674.3.7.2..9.47...8..1..16....926914.37.'

let length = string.length


let valid = /^[0-9|.]*$/


let coor = "aa"

let valCoor = /[a-iA-I]/
let validCoor = valCoor.test(coor)

let valNum = /[1-9]/
let validNum = valNum.test(coor[1])



let puzzleString = "..526......1.3.6....84...9.8..62...9..9...5..1...93..2.7...48....4.5.3......869.."


let col = { 1: [1,10,19,28,37,46,55,64,73],
2: [2,11,20,29,38,47,56,65,74],
3: [3,12,21,30,39,48,57,66,75],
4: [4,13,22,31,40,49,58,67,76],
5: [5,14,23,32,41,50,59,68,77],
6: [6,15,24,33,42,51,60,69,78],
7: [7,16,25,34,43,52,61,70,79],
8: [8,17,26,35,44,53,62,71,80],
9: [9,18,27,36,45,54,63,72,81]}


let rww = { a: [1,2,3,4,5,6,7,8,9],
b: [10,11,12,13,14,15,16,17,18],
c: [19,20,21,22,23,24,25,26,27],
d: [28,29,30,31,32,33,34,35,36],
e: [37,38,29,40,41,42,43,44,45],
f: [46,47,48,49,50,51,52,53,54],
g: [55,56,57,58,59,60,61,62,63],
h: [64,65,66,67,68,69,70,71,72],
i: [73,74,75,76,77,78,79,80,81]}

let box = {1: [1,2,3,10,11,12,19,20,21],
2: [4,5,6,13,14,15,22,23,24],
3: [7,8,9,16,17,18,25,26,27],
4: [28,29,30,37,38,39,46,47,48],
5: [31,32,33,40,41,42,49,50,51],
6: [34,35,36,43,44,45,52,53,54],
7: [55,56,57,64,65,66,73,74,75],
8: [58,59,60,67,68,69,76,77,78],
9: [61,62,63,70,71,72,79,80,81]}


let column = 2
let row = "h"
let value = 1

function checkColPlacement(puzzleString, row, column, value) {
let col = { 1: [1,10,19,28,37,46,55,64,73],
2: [2,11,20,29,38,47,56,65,74],
3: [3,12,21,30,39,48,57,66,75],
4: [4,13,22,31,40,49,58,67,76],
5: [5,14,23,32,41,50,59,68,77],
6: [6,15,24,33,42,51,60,69,78],
7: [7,16,25,34,43,52,61,70,79],
8: [8,17,26,35,44,53,62,71,80],
9: [9,18,27,36,45,54,63,72,81]}
let colcheck = ""

for (let i = 0; i < 9; i++) {
 
  if (puzzleString[col[column][i] - 1] == value) {
   
    colcheck = "truecol"
    return colcheck
    break
  }
    
}
}

function checkRowPlacement(puzzleString, row, column, value) {
  let rww = { a: [1,2,3,4,5,6,7,8,9],
b: [10,11,12,13,14,15,16,17,18],
c: [19,20,21,22,23,24,25,26,27],
d: [28,29,30,31,32,33,34,35,36],
e: [37,38,29,40,41,42,43,44,45],
f: [46,47,48,49,50,51,52,53,54],
g: [55,56,57,58,59,60,61,62,63],
h: [64,65,66,67,68,69,70,71,72],
i: [73,74,75,76,77,78,79,80,81]}
 
let rowcheck = ""

for (let i = 0; i < 9; i++) {

  if (puzzleString[(rww[row][i])-1] == value) {
   
    rowcheck = "truerow"
    return rowcheck
    break
  }
    
}
}
/*section*/
function checkRegionPlacement(puzzleString, row, column, value) {
  let box = {1: [1,2,3,10,11,12,19,20,21],
2: [4,5,6,13,14,15,22,23,24],
3: [7,8,9,16,17,18,25,26,27],
4: [28,29,30,37,38,39,46,47,48],
5: [31,32,33,40,41,42,49,50,51],
6: [34,35,36,43,44,45,52,53,54],
7: [55,56,57,64,65,66,73,74,75],
8: [58,59,60,67,68,69,76,77,78],
9: [61,62,63,70,71,72,79,80,81]}
  
let sect = ""

if (/[a-c]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 1
}
if (/[a-c]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 2
}
if (/[a-c]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 3
}
if (/[d-f]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 4
}
if (/[d-f]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 5
}
if (/[d-f]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 6
}
if (/[g-i]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 7
}
if (/[g-i]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 8
}
if (/[g-i]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 9
}


let boxcheck = ""

for (let i = 0; i < 9; i++) {
 
  if (puzzleString[box[sect][i] - 1] == value) {
   
    boxcheck = "truebox"
    return boxcheck
    break
  }
    
}

}
/*solver*/
coordinate = ['a1','a2','a3','a4','a5','a6','a7','a8','a9','b1','b2','b3','b4','b5','b6','b7','b8','b9','c1','c2','c3','c4','c5','c6','c7','c8','c9','d1','d2','d3','d4','d5','d6','d7','d8','d9','e1','e2','e3','e4','e5','e6','e7','e8','e9','f1','f2','f3','f4','f5','f6','f7','f8','f9','g1','g2','g3','g4','g5','g6','g7','g8','g9','h1','h2','h3','h4','h5','h6','h7','h8','h9','i1','i2','i3','i4','i5','i6','i7','i8','i9'] 


let checkRegion = checkRegionPlacement(puzzleString, row, column, value)
let checkColumn = checkColPlacement(puzzleString, row, column, value)
let checkRow = checkRowPlacement(puzzleString, row, column, value)


/*pencilfunction*/
function pencilArr(puzzleString) {

let pencil = []
for (let j = 0; j <= 80; j++) {
pencil.push([])
if (puzzleString[j] != ".") {
  pencil[j].push("solved")
  pencil[j].push(puzzleString[j])
}
 else {
for (let i = 1; i <= 9; i++) {
  
  let pencilRegion = checkRegionPlacement(puzzleString, coordinate[j][0], coordinate[j][1], i)
let pencilColumn = checkColPlacement(puzzleString, coordinate[j][0], coordinate[j][1], i)
let pencilRow = checkRowPlacement(puzzleString, coordinate[j][0], coordinate[j][1], i)
if (pencilRegion != 'truebox' && pencilColumn != 'truecol' && pencilRow != 'truerow') {
  pencil[j].push(i)
}
}
}
 
}
  return pencil
}

/*solver*/
/*
let solved = puzzleString
let arr = pencilArr(puzzleString)
*/


/*find naked singles*/
function solveNaked(arr, puzzleString) {
for (let j = 0; j <= 80; j++) {
 
 /*maybe check since added to the solved array*/
  let checkSolved = arr[j].indexOf('solved')
   if (arr[j].length ==1 && checkSolved == -1) {
    
    let split = puzzleString.split('')
    
     
     let solved2 = split.splice(j, 1, arr[j][0])
   
     solved = split.join("")
    return solved
   }
  
     
 } 
}
/*
 console.log(solved[64])
console.log(arr[64])
*/
/*find hidden singles*/


function checkColPencil(puzzleString, row, column, value){
let col = { 1: [1,10,19,28,37,46,55,64,73],
2: [2,11,20,29,38,47,56,65,74],
3: [3,12,21,30,39,48,57,66,75],
4: [4,13,22,31,40,49,58,67,76],
5: [5,14,23,32,41,50,59,68,77],
6: [6,15,24,33,42,51,60,69,78],
7: [7,16,25,34,43,52,61,70,79],
8: [8,17,26,35,44,53,62,71,80],
9: [9,18,27,36,45,54,63,72,81]}

let colcheck = ""
let checkarray = []

for (let i = 0; i < 9; i++) {
  /*
console.log(puzzleString[col[column][i] - 1].filter(function(x) {return x == 8}))*/
  
  
    
     
   for (let j = 0; j < value.length; j++) {   
    checkarray.push(puzzleString[col[column][i] - 1].filter(function(x) {return x == value[j]}))
  flatten = checkarray.flat()
   }
   
   
    
  }
 
let uniqueCol = flatten.filter(i => flatten.filter(j => i === j).length === 1)
return uniqueCol[0]
}

let colpencil = checkColPencil(pencilArr(puzzleString), "h", 2, [1,2,6,8,9])


/*rowpencil*/

function checkRowPencil(puzzleString, row, column, value){
  let rww = { a: [1,2,3,4,5,6,7,8,9],
b: [10,11,12,13,14,15,16,17,18],
c: [19,20,21,22,23,24,25,26,27],
d: [28,29,30,31,32,33,34,35,36],
e: [37,38,29,40,41,42,43,44,45],
f: [46,47,48,49,50,51,52,53,54],
g: [55,56,57,58,59,60,61,62,63],
h: [64,65,66,67,68,69,70,71,72],
i: [73,74,75,76,77,78,79,80,81]}
 

let checkarray = []

for (let i = 0; i < 9; i++) {
  /*
console.log(puzzleString[col[column][i] - 1].filter(function(x) {return x == 8}))*/
  
  
    
     
   for (let j = 0; j < value.length; j++) {   
    checkarray.push(puzzleString[(rww[row][i])-1].filter(function(x) {return x == value[j]}))
  flatten = checkarray.flat()
   }
   
   
    
  }
 
let uniqueRow = flatten.filter(i => flatten.filter(j => i === j).length === 1)
return uniqueRow[0]
}

let rowpencil = checkRowPencil(pencilArr(puzzleString), "h", 2, [1,2,6,8,9])


/*region pencil*/

function checkRegionPencil(puzzleString, row, column, value){
 let box = {1: [1,2,3,10,11,12,19,20,21],
2: [4,5,6,13,14,15,22,23,24],
3: [7,8,9,16,17,18,25,26,27],
4: [28,29,30,37,38,39,46,47,48],
5: [31,32,33,40,41,42,49,50,51],
6: [34,35,36,43,44,45,52,53,54],
7: [55,56,57,64,65,66,73,74,75],
8: [58,59,60,67,68,69,76,77,78],
9: [61,62,63,70,71,72,79,80,81]}
 
 let sect = ""

if (/[a-c]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 1
}
if (/[a-c]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 2
}
if (/[a-c]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 3
}
if (/[d-f]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 4
}
if (/[d-f]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 5
}
if (/[d-f]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 6
}
if (/[g-i]/.test(row) == true && /[1-3]/.test(column) == true) {
 sect = 7
}
if (/[g-i]/.test(row) == true && /[4-6]/.test(column) == true) {
 sect = 8
}
if (/[g-i]/.test(row) == true && /[7-9]/.test(column) == true) {
 sect = 9
}


 

let checkarray = []

for (let i = 0; i < 9; i++) {
  /*
console.log(puzzleString[col[column][i] - 1].filter(function(x) {return x == 8}))*/
  
  
    
     
   for (let j = 0; j < value.length; j++) {   
    checkarray.push(puzzleString[box[sect][i] - 1].filter(function(x) {return x == value[j]}))
  flatten = checkarray.flat()
   }
   
   
    
  }
 
let uniqueRegion = flatten.filter(i => flatten.filter(j => i === j).length === 1)
return uniqueRegion[0]
}

let regionpencil = checkRegionPencil(pencilArr(puzzleString), "h", 2, [1,2,6,8,9])

/*
console.log(regionpencil == colpencil && colpencil == rowpencil)
*/
/*add hidden single to solved*/

/*hidden solver*/

function hiddenSolve(puzzleString, puzzleStringNew) {
let hiddenarr = []
let pencil = []
for (let j = 0; j <= 80; j++) {


  
  let hiddenRegion = checkRegionPencil(puzzleString, coordinate[j][0], coordinate[j][1], puzzleString[j])
let hiddenColumn = checkColPencil(puzzleString, coordinate[j][0], coordinate[j][1], puzzleString[j])
let hiddenRow = checkRowPencil(puzzleString, coordinate[j][0], coordinate[j][1], puzzleString[j])
/*
console.log(coordinate[j] + " " + hiddenColumn + hiddenRegion + hiddenRow)
*/
let checkSolved = puzzleString[j].indexOf('solved')
if (hiddenRegion == hiddenColumn && hiddenColumn == hiddenRow && hiddenRegion != undefined & hiddenColumn != undefined && hiddenRow != undefined && checkSolved == -1){
 hiddenarr.push(coordinate[j])
  hiddenarr.push(hiddenRow)
  
  
 let split = puzzleStringNew.split('')
    
     
     let solvedhidden = split.splice(j, 1, hiddenRow)
   
     solvedhidden = split.join("")
    return solvedhidden
}
 
}
  console.log(hiddenarr)
}





/*solving sequence*/
/*
let solvedPencil = hiddenSolve(pencilArr(puzzleString))
let newArr = pencilArr(solvedPencil)
let newSol = solveNaked(newArr)

let newArr2 = pencilArr(newArr)
let newsol2 = solveNaked(newArr2)
*/

 let naked = solveNaked(pencilArr(puzzleString), puzzleString)
 console.log(naked + 'naked')
let hidden = hiddenSolve(pencilArr(puzzleString), naked)
console.log(hidden + 'hidden')
